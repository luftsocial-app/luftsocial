{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["App"]
      }
    },
    "/api/conversations/direct/{userId}": {
      "post": {
        "operationId": "ConversationController_createOrGetDirectChat",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID of the user to chat with",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Direct conversation found or created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConversationEntity" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create or get a direct chat with another user",
        "tags": ["Conversations"]
      }
    },
    "/api/conversations/group": {
      "post": {
        "operationId": "ConversationController_createGroupChat",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateConversationDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group conversation created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConversationEntity" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new group chat",
        "tags": ["Conversations"]
      }
    },
    "/api/conversations": {
      "get": {
        "operationId": "ConversationController_getMyConversations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConversationEntity" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all conversations for the current user",
        "tags": ["Conversations"]
      }
    },
    "/api/conversations/{id}": {
      "get": {
        "operationId": "ConversationController_getConversation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConversationEntity" }
              }
            }
          },
          "404": { "description": "Conversation not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get a specific conversation by ID",
        "tags": ["Conversations"]
      }
    },
    "/api/conversations/{id}/participants": {
      "post": {
        "operationId": "ConversationController_addParticipantsToConversation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddParticipantsDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Participants added successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConversationEntity" }
              }
            }
          },
          "403": { "description": "Only admins can add participants" },
          "409": { "description": "Cannot add participants to direct chat" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Add participants to a conversation",
        "tags": ["Conversations"]
      }
    },
    "/api/conversations/{id}/settings": {
      "patch": {
        "operationId": "ConversationController_updateConversationSettings",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Conversation ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConversationSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversation settings updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConversationEntity" }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to update settings"
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update conversation settings",
        "tags": ["Conversations"]
      }
    },
    "/api/tenants": {
      "post": {
        "operationId": "TenantController_createTodo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTenantDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Tenant"]
      }
    },
    "/api/tenants/{uuid}": {
      "get": {
        "operationId": "TenantController_getTenant",
        "parameters": [
          {
            "name": "uuid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Tenant"]
      },
      "put": {
        "operationId": "TenantController_updateTenant",
        "parameters": [
          {
            "name": "uuid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTenantDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["Tenant"]
      },
      "delete": {
        "operationId": "TenantController_deleteTodo",
        "parameters": [
          {
            "name": "uuid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Tenant"]
      }
    },
    "/api/messages/conversations/{conversationId}": {
      "get": {
        "operationId": "MessageController_getMessages",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "ID of the conversation",
            "schema": { "type": "string" }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "User ID for personalized responses like read status",
            "schema": { "example": "c3d4e5f6-g7h8-i9j0-k1l2", "type": "string" }
          },
          {
            "name": "senderId",
            "required": false,
            "in": "query",
            "description": "Filter messages by sender ID",
            "schema": { "example": "b2c3d4e5-f6g7-h8i9-j0k1", "type": "string" }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "description": "Search term to filter messages by content",
            "schema": { "example": "project update", "type": "string" }
          },
          {
            "name": "includeDeleted",
            "required": false,
            "in": "query",
            "description": "Whether to include deleted messages",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of messages per page",
            "schema": {
              "minimum": 1,
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort messages by",
            "schema": {
              "default": "createdAt",
              "type": "string",
              "enum": ["createdAt", "senderId"]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "DESC",
              "type": "string",
              "enum": ["ASC", "DESC"]
            }
          },
          {
            "description": "ID of the conversation to fetch messages from",
            "name": "conversationId",
            "in": "query",
            "required": true,
            "schema": { "example": "a1b2c3d4-e5f6-g7h8-i9j0", "type": "string" }
          },
          {
            "description": "User ID for personalized responses like read status",
            "required": false,
            "name": "userId",
            "in": "query",
            "schema": { "example": "c3d4e5f6-g7h8-i9j0-k1l2", "type": "string" }
          },
          {
            "description": "Filter messages by sender ID",
            "required": false,
            "name": "senderId",
            "in": "query",
            "schema": { "example": "b2c3d4e5-f6g7-h8i9-j0k1", "type": "string" }
          },
          {
            "description": "Search term to filter messages by content",
            "required": false,
            "name": "searchTerm",
            "in": "query",
            "schema": { "example": "project update", "type": "string" }
          },
          {
            "description": "Whether to include deleted messages",
            "required": false,
            "name": "includeDeleted",
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "description": "Page number for pagination",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "description": "Number of messages per page",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "Field to sort messages by",
            "required": false,
            "name": "sortBy",
            "in": "query",
            "schema": { "default": "createdAt", "type": "string" }
          },
          {
            "description": "Sort order",
            "required": false,
            "name": "sortOrder",
            "in": "query",
            "schema": { "default": "DESC", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageListResponseDto"
                }
              }
            }
          },
          "403": { "description": "Access denied" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get messages from a conversation",
        "tags": ["Messages"]
      }
    },
    "/api/messages": {
      "post": {
        "operationId": "MessageController_createMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateMessageDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new message",
        "tags": ["Messages"]
      }
    },
    "/api/messages/history/{userId}": {
      "get": {
        "operationId": "MessageController_getMessageHistory",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID of the user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Message history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MessageResponseDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get message history for a user",
        "tags": ["Messages"]
      }
    },
    "/api/messages/{id}": {
      "get": {
        "operationId": "MessageController_getMessage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Message retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWithRelationsDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get message by ID",
        "tags": ["Messages"]
      },
      "patch": {
        "operationId": "MessageController_updateMessage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message to update",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateMessageDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponseDto" }
              }
            }
          },
          "403": { "description": "Not authorized to update message" },
          "404": { "description": "Message not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update a message",
        "tags": ["Messages"]
      },
      "delete": {
        "operationId": "MessageController_deleteMessage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message to delete",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Message deleted successfully" },
          "403": { "description": "Not authorized to delete message" },
          "404": { "description": "Message not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete a message",
        "tags": ["Messages"]
      }
    },
    "/api/messages/{id}/reactions": {
      "post": {
        "operationId": "MessageController_addReaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReactionDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction added successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Add a reaction to a message",
        "tags": ["Messages"]
      },
      "delete": {
        "operationId": "MessageController_removeReaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReactionDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction removed successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponseDto" }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Remove a reaction from a message",
        "tags": ["Messages"]
      }
    },
    "/api/messages/{id}/attachments": {
      "get": {
        "operationId": "MessageController_getAttachments",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get attachments for a message",
        "tags": ["Messages"]
      }
    },
    "/api/messages/{id}/replies": {
      "get": {
        "operationId": "MessageController_getThreadReplies",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the parent message",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread replies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MessageResponseDto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get thread replies",
        "tags": ["Messages"]
      }
    },
    "/api/messages/{id}/read": {
      "post": {
        "operationId": "MessageController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the message",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Message marked as read successfully" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Mark message as read",
        "tags": ["Messages"]
      }
    },
    "/api/messages/unread/{conversationId}": {
      "get": {
        "operationId": "MessageController_getUnreadCount",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "ID of the conversation",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unread count retrieved successfully",
            "content": {
              "application/json": { "schema": { "type": "number" } }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get unread message count",
        "tags": ["Messages"]
      }
    },
    "/api/webhooks": {
      "post": {
        "operationId": "ClerkWebhookController_handleWebhook",
        "parameters": [],
        "responses": { "201": { "description": "" } },
        "tags": ["ClerkWebhook"]
      }
    },
    "/api/users": {
      "get": {
        "operationId": "UserController_getUsers",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["User"]
      }
    },
    "/api/users/Tenant": {
      "get": {
        "operationId": "UserController_getTenantUsers",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["User"]
      }
    },
    "/api/users/role": {
      "patch": {
        "operationId": "UserController_updateUserRole",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["User"]
      }
    },
    "/api/users/{tenantId}/{clerkId}": {
      "get": {
        "operationId": "UserController_findUser",
        "parameters": [
          {
            "name": "clerkId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["User"]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "ok" },
                    "info": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "info": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": { "status": "up" },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Health"]
      }
    },
    "/api/posts/{postId}": {
      "get": {
        "operationId": "PostsController_find",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Posts"]
      }
    },
    "/api/tasks": {
      "get": {
        "operationId": "TaskController_getTasks",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Task"]
      },
      "post": {
        "operationId": "TaskController_createTask",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTaskDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Task"]
      }
    },
    "/api/tasks/{uuid}": {
      "get": {
        "operationId": "TaskController_getTask",
        "parameters": [
          {
            "name": "uuid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Task"]
      },
      "put": {
        "operationId": "TaskController_updateTask",
        "parameters": [
          {
            "name": "uuid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTaskDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["Task"]
      },
      "delete": {
        "operationId": "TaskController_deleteTask",
        "parameters": [
          {
            "name": "uuid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Task"]
      }
    },
    "/api/uploads/presigned-url": {
      "get": {
        "operationId": "MediaStorageController_getPresignedUrl",
        "parameters": [
          {
            "name": "fileName",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "mimeType",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "tags": ["Media Storage"]
      }
    },
    "/api/uploads/tenant-post-assets": {
      "get": {
        "operationId": "MediaStorageController_getTenantUploads",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "security": [{ "bearer": [] }],
        "tags": ["Media Storage"]
      }
    },
    "/api/platforms/facebook/{accountId}/posts": {
      "post": {
        "operationId": "FacebookController_createPost",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "201": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/pages/{pageId}/posts": {
      "post": {
        "operationId": "FacebookController_createPostForPage",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePostDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Facebook"]
      },
      "get": {
        "operationId": "FacebookController_getPagePosts",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "cursor",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/{accountId}/posts/schedule": {
      "post": {
        "operationId": "FacebookController_schedulePost",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SchedulePostDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/pages/{pageId}/schedule": {
      "post": {
        "operationId": "FacebookController_schedulePagePost",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SchedulePagePostDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/{accountId}/posts/{postId}/comments": {
      "get": {
        "operationId": "FacebookController_getComments",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "pageToken",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/pages": {
      "get": {
        "operationId": "FacebookController_getPages",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/pages/{pageId}/insights": {
      "get": {
        "operationId": "FacebookController_getPageInsights",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "metrics",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/posts/{accountId}/{postId}/metrics": {
      "get": {
        "operationId": "FacebookController_getPostMetrics",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/posts/{postId}": {
      "put": {
        "operationId": "FacebookController_updatePost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePostDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      },
      "delete": {
        "operationId": "FacebookController_deletePost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/facebook/pages/{pageId}": {
      "put": {
        "operationId": "FacebookController_updatePage",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePageDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["Facebook"]
      }
    },
    "/api/platforms/instagram/{accountId}/media": {
      "post": {
        "operationId": "InstagramController_createPost",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePostDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Instagram"]
      }
    },
    "/api/platforms/instagram/{accountId}/stories": {
      "post": {
        "operationId": "InstagramController_createStory",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateStoryDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Instagram"]
      }
    },
    "/api/platforms/instagram/{accountId}/media/{mediaId}/comments": {
      "get": {
        "operationId": "InstagramController_getComments",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "mediaId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "pageToken",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Instagram"]
      }
    },
    "/api/platforms/instagram/{accountId}/media/{mediaId}/metrics": {
      "get": {
        "operationId": "InstagramController_getMetrics",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "mediaId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Instagram"]
      }
    },
    "/api/platforms/instagram/{accountId}/insights": {
      "get": {
        "operationId": "InstagramController_getAccountInsights",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Instagram"]
      }
    },
    "/api/auth/{platform}/authorize": {
      "get": {
        "operationId": "PlatformAuthController_authorize",
        "parameters": [
          {
            "name": "platform",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["PlatformAuth"]
      }
    },
    "/api/auth/{platform}/callback": {
      "get": {
        "operationId": "PlatformAuthController_handleCallback",
        "parameters": [
          {
            "name": "platform",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "code",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "state",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["PlatformAuth"]
      }
    },
    "/api/auth/{platform}/refresh": {
      "post": {
        "operationId": "PlatformAuthController_refreshToken",
        "parameters": [
          {
            "name": "platform",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "201": { "description": "" } },
        "tags": ["PlatformAuth"]
      }
    },
    "/api/auth/{platform}/revoke": {
      "post": {
        "operationId": "PlatformAuthController_revokeToken",
        "parameters": [
          {
            "name": "platform",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "201": { "description": "" } },
        "tags": ["PlatformAuth"]
      }
    },
    "/api/auth/platforms": {
      "get": {
        "operationId": "PlatformAuthController_getAvailablePlatforms",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["PlatformAuth"]
      }
    },
    "/api/platforms/linkedin/{accountId}/posts": {
      "post": {
        "operationId": "LinkedInController_createPost",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateLinkedInPostDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["LinkedIn"]
      }
    },
    "/api/platforms/linkedin/{accountId}/posts/{postId}/comments": {
      "get": {
        "operationId": "LinkedInController_getComments",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "pageToken",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["LinkedIn"]
      }
    },
    "/api/platforms/linkedin/{accountId}/posts/{postId}/metrics": {
      "get": {
        "operationId": "LinkedInController_getMetrics",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["LinkedIn"]
      }
    },
    "/api/platforms/linkedin/{accountId}/organizations": {
      "get": {
        "operationId": "LinkedInController_getUserOrganizations",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["LinkedIn"]
      }
    },
    "/api/platforms/tiktok/{accountId}/videos": {
      "post": {
        "operationId": "TikTokController_uploadVideoFile",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateVideoDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["TikTok"]
      }
    },
    "/api/platforms/tiktok/{accountId}/videos/{videoId}/comments": {
      "get": {
        "operationId": "TikTokController_getComments",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "cursor",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TikTok"]
      }
    },
    "/api/platforms/tiktok/{accountId}/videos/{publishId}/status": {
      "get": {
        "operationId": "TikTokController_getVideoStatus",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "publishId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TikTok"]
      }
    },
    "/api/platforms/tiktok/{accountId}/videos/{videoId}/metrics": {
      "get": {
        "operationId": "TikTokController_getMetrics",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TikTok"]
      }
    },
    "/api/platforms/tiktok/{accountId}/analytics": {
      "get": {
        "operationId": "TikTokController_getAnalytics",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TikTok"]
      }
    },
    "/api/platforms/tiktok/{accountId}/videos/{videoId}/performance": {
      "get": {
        "operationId": "TikTokController_getVideoPerformance",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "days",
            "required": true,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["TikTok"]
      }
    },
    "/api/cross-platform/platforms/connected": {
      "get": {
        "operationId": "CrossPlatformController_getConnectedPlatforms",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/platforms/{platform}/{accountId}": {
      "delete": {
        "operationId": "CrossPlatformController_disconnectPlatform",
        "parameters": [
          {
            "name": "platform",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/publish": {
      "post": {
        "operationId": "CrossPlatformController_publishContent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCrossPlatformPostDto"
              }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/publish/{publishId}/status": {
      "get": {
        "operationId": "CrossPlatformController_getPublishStatus",
        "parameters": [
          {
            "name": "publishId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/schedule": {
      "post": {
        "operationId": "CrossPlatformController_schedulePost",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCrossPlatformPostDto"
              }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["Cross-Platform"]
      },
      "get": {
        "operationId": "CrossPlatformController_getScheduledPosts",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/schedule/{postId}": {
      "put": {
        "operationId": "CrossPlatformController_updateScheduledPost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateScheduleDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      },
      "delete": {
        "operationId": "CrossPlatformController_cancelScheduledPost",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/analytics": {
      "get": {
        "operationId": "CrossPlatformController_getAnalytics",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/cross-platform/analytics/content": {
      "get": {
        "operationId": "CrossPlatformController_getContentPerformance",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Cross-Platform"]
      }
    },
    "/api/webhooks/tiktok": {
      "post": {
        "operationId": "TiktokController_handleTiktokWebhook",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["Tiktok"]
      }
    }
  },
  "info": {
    "title": "LuftSocial API",
    "description": "The LuftSocial API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [{ "name": "lustsocial endpoints", "description": "" }],
  "servers": [{ "url": "http://localhost:3000" }],
  "components": {
    "securitySchemes": {
      "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "ConversationEntity": { "type": "object", "properties": {} },
      "IConversationSettings": {
        "type": "object",
        "properties": {
          "muteNotifications": {
            "type": "boolean",
            "description": "Whether to mute notifications for this conversation",
            "default": false
          },
          "theme": {
            "type": "string",
            "description": "Theme preference for this conversation",
            "example": "dark"
          },
          "enableReadReceipts": {
            "type": "boolean",
            "description": "Whether to enable read receipts",
            "default": true
          },
          "enableTypingIndicators": {
            "type": "boolean",
            "description": "Whether to enable typing indicators",
            "default": true
          },
          "retentionPeriodDays": {
            "type": "number",
            "description": "Number of days to retain messages before auto-deletion",
            "example": 30
          },
          "autoDeleteThreads": {
            "type": "boolean",
            "description": "Whether to auto-delete threads",
            "default": false
          },
          "allowReactions": {
            "type": "boolean",
            "description": "Whether to allow reactions on messages",
            "default": true
          },
          "defaultNotificationSound": {
            "type": "string",
            "description": "Default notification sound",
            "example": "chime"
          }
        }
      },
      "CreateConversationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the conversation (required for group conversations)",
            "example": "Project Team Chat"
          },
          "type": {
            "type": "string",
            "description": "The type of conversation",
            "enum": ["direct", "group", "channel"],
            "example": "group"
          },
          "participantIds": {
            "description": "IDs of users to add to the conversation",
            "example": ["a1b2c3d4-e5f6-g7h8-i9j0", "b2c3d4e5-f6g7-h8i9-j0k1"],
            "type": "array",
            "items": { "type": "string" }
          },
          "creatorId": {
            "type": "string",
            "description": "ID of the user creating the conversation",
            "example": "a1b2c3d4-e5f6-g7h8-i9j0"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the conversation is private",
            "default": false,
            "example": true
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the conversation",
            "example": {
              "avatar": "https://example.com/avatar.jpg",
              "isEncrypted": false
            }
          },
          "settings": {
            "description": "Conversation settings",
            "example": {
              "muteNotifications": false,
              "theme": "light",
              "enableReadReceipts": true
            },
            "allOf": [{ "$ref": "#/components/schemas/IConversationSettings" }]
          }
        },
        "required": ["type", "participantIds"]
      },
      "AddParticipantsDto": {
        "type": "object",
        "properties": {
          "participantIds": {
            "description": "IDs of users to add to the conversation",
            "example": ["a1b2c3d4-e5f6-g7h8-i9j0", "b2c3d4e5-f6g7-h8i9-j0k1"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["participantIds"]
      },
      "UpdateConversationSettingsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the conversation",
            "example": "Updated Team Chat"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Update privacy setting for the conversation",
            "example": true
          },
          "metadata": {
            "type": "object",
            "description": "Updated metadata for the conversation",
            "example": {
              "avatar": "https://example.com/new-avatar.jpg",
              "isEncrypted": true
            }
          },
          "settings": {
            "type": "object",
            "description": "Updated conversation settings",
            "example": {
              "muteNotifications": true,
              "theme": "dark",
              "enableReadReceipts": false
            }
          }
        }
      },
      "CreateTenantDto": { "type": "object", "properties": {} },
      "UpdateTenantDto": { "type": "object", "properties": {} },
      "MessageReactionDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID who added the reaction",
            "example": "a1b2c3d4-e5f6-g7h8-i9j0"
          },
          "emoji": {
            "type": "string",
            "description": "Emoji reaction",
            "example": "👍"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the reaction was added",
            "example": "2023-01-01T12:00:00.000Z"
          }
        },
        "required": ["userId", "emoji", "createdAt"]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "a1b2c3d4-e5f6-g7h8-i9j0"
          },
          "conversationId": {
            "type": "string",
            "description": "Conversation ID",
            "example": "b2c3d4e5-f6g7-h8i9-j0k1"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello world!"
          },
          "senderId": {
            "type": "string",
            "description": "Sender ID",
            "example": "c3d4e5f6-g7h8-i9j0-k1l2"
          },
          "senderUsername": {
            "type": "string",
            "description": "Sender username",
            "example": "johndoe"
          },
          "parentMessageId": {
            "type": "string",
            "description": "Parent message ID (for threaded replies)",
            "example": "d4e5f6g7-h8i9-j0k1-l2m3"
          },
          "status": {
            "type": "string",
            "description": "Message status",
            "enum": ["sending", "sent", "delivered", "read", "failed"],
            "example": "sent"
          },
          "reactions": {
            "description": "Reactions to this message",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessageReactionDto" }
          },
          "editHistory": {
            "description": "Edits history",
            "example": ["Original content", "First edit"],
            "type": "array",
            "items": { "type": "string" }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-01-01T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp",
            "example": "2023-01-01T12:30:00.000Z"
          },
          "readBy": {
            "type": "object",
            "description": "Users who have read this message",
            "additionalProperties": { "type": "string", "format": "date-time" },
            "example": {
              "user1-id": "2023-01-01T12:00:00.000Z",
              "user2-id": "2023-01-01T12:05:00.000Z"
            }
          },
          "isRead": {
            "type": "boolean",
            "description": "Whether the current user has read this message",
            "example": true
          },
          "isEdited": {
            "type": "boolean",
            "description": "Whether the message has been edited",
            "example": true
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the message",
            "example": { "editHistory": ["Original message"] }
          }
        },
        "required": [
          "id",
          "conversationId",
          "content",
          "senderId",
          "status",
          "createdAt"
        ]
      },
      "MessageListResponseDto": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "List of messages",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessageResponseDto" }
          },
          "total": {
            "type": "number",
            "description": "Total message count",
            "example": 100
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "pageSize": {
            "type": "number",
            "description": "Page size",
            "example": 20
          },
          "unreadCount": {
            "type": "number",
            "description": "Unread count for the user",
            "example": 5
          }
        },
        "required": ["messages", "total", "page", "pageSize"]
      },
      "CreateMessageDto": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "The ID of the conversation where the message is being sent",
            "example": "a1b2c3d4-e5f6-g7h8-i9j0"
          },
          "content": {
            "type": "string",
            "description": "The content of the message",
            "example": "Hello world!",
            "minLength": 1,
            "maxLength": 5000
          },
          "parentMessageId": {
            "type": "string",
            "description": "Optional parent message ID for threaded replies",
            "example": "b2c3d4e5-f6g7-h8i9-j0k1"
          }
        },
        "required": ["conversationId", "content"]
      },
      "AttachmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attachment ID",
            "example": "a1b2c3d4-e5f6-g7h8-i9j0"
          },
          "fileName": {
            "type": "string",
            "description": "File name",
            "example": "document.pdf"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes",
            "example": 1024
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type",
            "example": "application/pdf"
          },
          "url": {
            "type": "string",
            "description": "File URL",
            "example": "https://storage.example.com/files/document.pdf"
          },
          "processingStatus": {
            "type": "string",
            "description": "Processing status",
            "example": "COMPLETED"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the attachment was created",
            "example": "2023-01-01T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "fileName",
          "fileSize",
          "mimeType",
          "url",
          "createdAt"
        ]
      },
      "MessageWithRelationsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "a1b2c3d4-e5f6-g7h8-i9j0"
          },
          "conversationId": {
            "type": "string",
            "description": "Conversation ID",
            "example": "b2c3d4e5-f6g7-h8i9-j0k1"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello world!"
          },
          "senderId": {
            "type": "string",
            "description": "Sender ID",
            "example": "c3d4e5f6-g7h8-i9j0-k1l2"
          },
          "senderUsername": {
            "type": "string",
            "description": "Sender username",
            "example": "johndoe"
          },
          "parentMessageId": {
            "type": "string",
            "description": "Parent message ID (for threaded replies)",
            "example": "d4e5f6g7-h8i9-j0k1-l2m3"
          },
          "status": {
            "type": "string",
            "description": "Message status",
            "enum": ["sending", "sent", "delivered", "read", "failed"],
            "example": "sent"
          },
          "reactions": {
            "description": "Reactions to this message",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessageReactionDto" }
          },
          "editHistory": {
            "description": "Edits history",
            "example": ["Original content", "First edit"],
            "type": "array",
            "items": { "type": "string" }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-01-01T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp",
            "example": "2023-01-01T12:30:00.000Z"
          },
          "readBy": {
            "type": "object",
            "description": "Users who have read this message",
            "additionalProperties": { "type": "string", "format": "date-time" },
            "example": {
              "user1-id": "2023-01-01T12:00:00.000Z",
              "user2-id": "2023-01-01T12:05:00.000Z"
            }
          },
          "isRead": {
            "type": "boolean",
            "description": "Whether the current user has read this message",
            "example": true
          },
          "isEdited": {
            "type": "boolean",
            "description": "Whether the message has been edited",
            "example": true
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the message",
            "example": { "editHistory": ["Original message"] }
          },
          "attachments": {
            "description": "Attachments for this message",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AttachmentResponseDto" }
          },
          "replyCount": {
            "type": "number",
            "description": "Number of thread replies",
            "example": 5
          }
        },
        "required": [
          "id",
          "conversationId",
          "content",
          "senderId",
          "status",
          "createdAt"
        ]
      },
      "UpdateMessageDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The updated content of the message",
            "example": "Updated message content",
            "minLength": 1,
            "maxLength": 5000
          }
        },
        "required": ["content"]
      },
      "ReactionDto": {
        "type": "object",
        "properties": {
          "emoji": {
            "type": "string",
            "description": "The emoji reaction to add",
            "example": "👍"
          }
        },
        "required": ["emoji"]
      },
      "CreateTaskDto": { "type": "object", "properties": {} },
      "UpdateTaskDto": { "type": "object", "properties": {} },
      "CreatePostDto": { "type": "object", "properties": {} },
      "SchedulePostDto": { "type": "object", "properties": {} },
      "SchedulePagePostDto": { "type": "object", "properties": {} },
      "UpdatePostDto": { "type": "object", "properties": {} },
      "UpdatePageDto": { "type": "object", "properties": {} },
      "CreateStoryDto": { "type": "object", "properties": {} },
      "CreateLinkedInPostDto": { "type": "object", "properties": {} },
      "CreateVideoDto": { "type": "object", "properties": {} },
      "CreateCrossPlatformPostDto": { "type": "object", "properties": {} },
      "ScheduleCrossPlatformPostDto": { "type": "object", "properties": {} },
      "UpdateScheduleDto": { "type": "object", "properties": {} }
    }
  }
}
